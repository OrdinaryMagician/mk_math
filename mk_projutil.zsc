/*
   Screen projection helper code
   Helper code for setting up screen projection using the Gutamatics library.
   Obviously requires said library to work.
   Note: Replace GMPREFIX with whatever you used in your Gutamatics install.

   Copyright (c)2021 Marisa Kirisame, UnSX Team

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to
   deal in the Software without restriction, including without limitation the
   rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
   sell copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
   IN THE SOFTWARE.
*/

Struct PREFIX_ProjectionData
{
	GMPREFIX_Matrix wtc;
	int viewx, viewy, vieww, viewh;
}

Class PREFIX_ProjectionUtil
{
	// gutamatics caching
	static void PrepareProjData( out PREFIX_ProjectionData d, Vector3 viewpos, double angle, double pitch, double roll, double fov )
	{
		double aspect = Screen.GetAspectRatio();
		// vertical fov
		double fovratio = (aspect>=1.3)?1.333333:aspect;
		double fovy = 2.*atan(tan(clamp(fov,5,170)/2.)/fovratio);
		// worldâ†’clip matrix
		GMPREFIX_Matrix view = GMPREFIX_Matrix.view(viewpos,angle,pitch,roll);
		GMPREFIX_Matrix perp = GMPREFIX_Matrix.perspective(fovy,aspect,5,65535);
		d.wtc = perp.multiplyMatrix(view);
		// screen coord data
		int sblocks = CVar.FindCVar('screenblocks').GetInt();
		int viewx, viewy, vieww, viewh;
		[viewx, viewy, vieww, viewh] = Screen.GetViewWindow();
		int sh = Screen.GetHeight();
		int h = sh;
		if ( sblocks < 10 ) h = (sblocks*sh/10)&~7;
		int bottom = sh-(h+viewy-((h-viewh)/2));
		d.viewx = viewx;
		d.viewy = sh-bottom-h;
		d.vieww = vieww;
		d.viewh = h;
	}

	static Vector3 ProjectPoint( PREFIX_ProjectionData d, Vector3 worldpos )
	{
		return d.wtc.multiplyVector3(worldpos).asVector3();
	}

	static Vector2 NDCToViewport( PREFIX_ProjectionData d, Vector3 ndc )
	{
		return (d.viewx,d.viewy)+(((ndc.x+1)*d.vieww)/2,((-ndc.y+1)*d.viewh)/2);
	}

	// checks if a point is inside the viewport
	static bool TestScreenBounds( PREFIX_ProjectionData d, Vector2 vpos )
	{
		return ((vpos.x == clamp(vpos.x,d.viewx,d.viewx+d.vieww))
			&& (vpos.y == clamp(vpos.y,d.viewy,d.viewy+d.viewh)));
	}
}
